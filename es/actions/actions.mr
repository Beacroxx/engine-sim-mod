module {
    @name:      "Actions"
    @author:    "ATG (Ange Yaghi)"
    @copyright: "Copyright 2022, Ange Yaghi"
}

private import "../types/atomic_types.mr"
private import "../types/conversions.mr"
private import "../types/operations.mr"
private import "../constants/constants.mr"
private import "../constants/units.mr"
private import "../objects/objects.mr"

constants constants()
units units()

public node set_engine => __engine_sim__set_engine {
    input engine [engine];
}

private node _add_rod_journal => __engine_sim__add_rod_journal {
    input rod_journal [rod_journal];
    input crankshaft [crankshaft];
}

public node add_rod_journal {
    input rod_journal;
    input this;
    alias output out: this;

    _add_rod_journal(rod_journal, this)
}

public node _add_crankshaft => __engine_sim__add_crankshaft {
    input crankshaft [crankshaft];
    input engine [engine];
}

public node add_crankshaft {
    input crankshaft;
    input this;
    alias output out: this;

    _add_crankshaft(crankshaft, engine: this)
}

private node _add_cylinder_bank => __engine_sim__add_cylinder_bank {
    input engine [engine];
    input cylinder_bank [cylinder_bank];
}

public node add_cylinder_bank {
    input cylinder_bank;
    input this;
    alias output __out: this;

    _add_cylinder_bank(engine: this, cylinder_bank)
}

private node _add_cylinder => __engine_sim__add_cylinder {
    input piston [piston];
    input connecting_rod [connecting_rod];
    input rod_journal [rod_journal];
    input exhaust_system [exhaust_system];
    input intake [intake];
    input cylinder_bank [cylinder_bank];
    input ignition_wire [ignition_wire];
}

public node add_cylinder {
    input intake;
    input exhaust_system;
    input piston;
    input connecting_rod;
    input rod_journal;
    input ignition_wire;
    input this;
    alias output __out: this;

    _add_cylinder(
        piston: piston,
        connecting_rod: connecting_rod,
        rod_journal: rod_journal,
        exhaust_system: exhaust_system,
        intake: intake,
        ignition_wire: ignition_wire,
        cylinder_bank: this
    )
}

private node _add_sample => __engine_sim__add_sample {
    input x [float];
    input y [float];
    input function [function];
}

public node add_sample {
    input x;
    input y;
    input this;
    alias output __out: this;

    _add_sample(x: x, y: y, function: this)
}

private node _add_lobe => __engine_sim__add_lobe {
    input centerline [float];
    input camshaft [camshaft];
}

public node add_lobe {
    input centerline;
    input this;
    alias output __out: this;

    _add_lobe(centerline: centerline, camshaft: this)
}

private node _set_cylinder_head => __engine_sim__set_cylinder_head {
    input head [cylinder_head];
    input bank [cylinder_bank];
}

public node set_cylinder_head {
    input head;
    input this;

    _set_cylinder_head(head: head, bank: this)
}

public node k_28inH2O => __engine_sim__k_28inH2O {
    input flow [float]: 1.0;
    alias output __out [float];
}

public node k_carb => __engine_sim__k_carb {
    input flow [float]: 1.0;
    alias output __out [float];
}

public node circle_area {
    input radius;
    alias output __out:
        constants.pi * radius * radius;
}

public node _connect_wire => __engine_sim__connect_ignition_wire {
    input wire [ignition_wire];
    input ignition_module [ignition_module];
    input angle [float];
}

public node connect_wire {
    input wire;
    input angle;
    input this;
    alias output __out: this;

    _connect_wire(wire: wire, angle: angle, ignition_module: this)
}

private node _add_ignition_module => __engine_sim__add_ignition_module {
    input ignition_module [ignition_module];
    input engine [engine];
}

public node add_ignition_module {
    input ignition_module;
    input this;
    alias output __out: this;

    _add_ignition_module(ignition_module: ignition_module, engine: this)
}

public node _generate_harmonic_cam_lobe => __engine_sim__generate_harmonic_cam_lobe {
    input duration_at_50_thou [float];
    input gamma [float];
    input lift [float];
    input steps [int];
    input function [function];
}

public node harmonic_cam_lobe {
    input duration_at_50_thou: 0.0;
    input gamma: 1.0;
    input lift: 300 * units.thou;
    input steps: 100;
    alias output __out: generated_function;

    function generated_function()
    _generate_harmonic_cam_lobe(
        duration_at_50_thou: duration_at_50_thou,
        gamma: gamma,
        lift: lift,
        steps: steps,
        function: generated_function
    )    
}
