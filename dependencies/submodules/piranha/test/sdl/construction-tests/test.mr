public node float => __float {
    input __in;
}

public node int => __int {
    input __out;
}

public node float_conversion => __float_conv {
    input __in;
    output __out [float];
}

public node int_conversion => __int_conv {
    input __in;
    output __out [int];
}

// Internally the '+' operator will map to both a C++ type and this builtin name
// The builtin name is used by the compiler for reference checking
public node float_add => __float_add {
    input a;
    input b;
    default output c [float]; 
}

public node int_add => __int_add {
    input a;
    input b;
    default output c [int];
}

// Things I need
// 1. Rather than mapping an operator to a whole node type, it needs to also map to a builtin type for type checking
// 2. Operator resolution needs to happen much earlier in the process so that the operator can be linked to a node definition
// 3. A builtin node would also have to indicate whether or not it is an alias for an actual channel type
//      a. Ie. the float node for example is essentially an alias for the FloatNodeOutput type
//      - This way float_add would basically return a floating point value
