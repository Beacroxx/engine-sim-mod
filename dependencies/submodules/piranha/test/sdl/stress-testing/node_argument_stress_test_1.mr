private node test {
    input x;
    input y;

    output a: x;
    output b: y;
}

private node empty {}

private node half_good {
    output b: 5;
}

private node even_harder {
    input v;
    alias output _v: v;
}

private node confusion {
    input some_input;
    output test: test(some_input.a, some_input.b);  // UndefinedMember x4
    output internal_test: internal_node.a;         // UndefinedMember

    even_harder internal_node(
        empty()
    )
}

// Should work
confusion good(
    test(5, 5)
)          

// Should work
confusion good_but_hard(
    even_harder(
        test(5, 5)
    )   
)

// Shouldn't work
confusion bad(empty())      

// Should only cause one error
confusion half_good(half_good())

// Should only cause one error
confusion bad_and_hard(
    even_harder(half_good())
)

public node int_channel => __piranha__int {}
public node literal_int => __piranha__literal_int {
    alias output __out [int_channel];
}

public node float_channel => __piranha__float {}
public node literal_float => __piranha__literal_float {
    alias output __out [float_channel];
}

public node string_channel => __piranha__string {}
public node literal_string => __piranha__literal_string {
    alias output __out [string_channel];
}
