private import "conversions.mr"

// ADD NODES
public inline node int_add => __piranha__int_add {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public inline node float_add => __piranha__float_add {
    input __in0 [float];
    input __in1 [float];
    alias output __out [float];
}

public inline node string_add => __piranha__string_add {
    input __in0 [string];
    input __in1 [string];
    alias output __out [string];
}

public inline node vector_add => __piranha__vector_add {
    input __in0 [vector];
    input __in1 [vector];
    alias output __out [vector];
}

// SUBTRACT NODES
public inline node int_subtract => __piranha__int_subtract {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public inline node float_subtract => __piranha__float_subtract {
    input __in0 [float];
    input __in1 [float];
    alias output __out [float];
}

public inline node vector_subtract => __piranha__vector_subtract {
    input __in0 [vector];
    input __in1 [vector];
    alias output __out [vector];
}

// MULTIPLY NODES
public inline node int_multiply => __piranha__int_multiply {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public inline node float_multiply => __piranha__float_multiply {
    input __in0 [float];
    input __in1 [float];
    alias output __out [float];
}

public inline node vector_multiply => __piranha__vector_multiply {
    input __in0 [vector];
    input __in1 [vector];
    alias output __out [vector];
}

// DIVIDE NODES
public inline node int_divide => __piranha__int_divide {
    input __in0 [int];
    input __in1 [int];
    alias output __out [int];
}

public inline node float_divide => __piranha__float_divide {
    input __in0 [float];
    input __in1 [float];
    alias output __out [float];
}

public inline node vector_divide => __piranha__vector_divide {
    input __in0 [vector];
    input __in1 [vector];
    alias output __out [vector];
}

// UNARY OPERATORS

// Numerical negate
public inline node float_negate => __piranha__float_negate {
    input __in [float];
    alias output __out [float];
}

public inline node int_negate => __piranha__int_negate {
    input __in [int];
    alias output __out [int];
}

public inline node vector_negate => __piranha__vector_negate {
    input __in [vector];
    alias output __out [vector];
}

public inline node float_positive => __piranha__float_positive {
    input __in [float];
    alias output __out [float];
}

public inline node int_positive => __piranha__int_positive {
    input __in [int];
    alias output __out [int];
}

public inline node vector_positive => __piranha__vector_positive {
    input __in [vector];
    alias output __out [vector];
}

public inline node bool_negate => __piranha__bool_negate {
    input __in [bool];
    alias output __out [bool];
}
